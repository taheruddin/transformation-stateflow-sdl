-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
WITH System;
WITH TASTE_BasicTypes;
--# inherit adaasn1rtl,TASTE_BasicTypes;


PACKAGE TASTE_Dataview
IS


-----------------------------------------------------------asn1SccMyInteger-------------------------------------------------------------
SUBTYPE asn1SccMyInteger IS adaasn1rtl.Asn1Int range 0..255;

asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 1;
asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 8;
asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING:CONSTANT INTEGER := 1;
asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING:CONSTANT INTEGER := 8;
asn1SccMyInteger_REQUIRED_BYTES_FOR_XER_ENCODING:CONSTANT INTEGER :=  0;

FUNCTION asn1SccMyInteger_Init return asn1SccMyInteger;
---# derives val from;
FUNCTION asn1SccMyInteger_IsConstraintValid(val : in asn1SccMyInteger) return adaasn1rtl.ASN1_RESULT;
---# derives result from val;
FUNCTION asn1SccMyInteger_Equal(val1, val2: in asn1SccMyInteger) return Boolean;



ERR_asn1SccMyInteger:CONSTANT INTEGER := 1005; -- (0 .. 255)

-----------------------------------------------------------asn1SccMyString-------------------------------------------------------------
SUBTYPE asn1SccMyString_index is integer range 1..255;
SUBTYPE asn1SccMyString_array IS adaasn1rtl.OctetBuffer(asn1SccMyString_index);
SUBTYPE asn1SccMyString_length_index is integer range 0..255;
TYPE asn1SccMyString IS  RECORD
    Length : asn1SccMyString_length_index;
    Data  : asn1SccMyString_array;
END RECORD;

asn1SccMyString_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 256;
asn1SccMyString_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 2048;
asn1SccMyString_REQUIRED_BYTES_FOR_ACN_ENCODING:CONSTANT INTEGER := 256;
asn1SccMyString_REQUIRED_BITS_FOR_ACN_ENCODING:CONSTANT INTEGER := 2048;
asn1SccMyString_REQUIRED_BYTES_FOR_XER_ENCODING:CONSTANT INTEGER :=  0;

FUNCTION asn1SccMyString_Init return asn1SccMyString;
---# derives val from;
FUNCTION asn1SccMyString_IsConstraintValid(val : in asn1SccMyString) return adaasn1rtl.ASN1_RESULT;
---# derives result from val;
FUNCTION asn1SccMyString_Equal(val1, val2: in asn1SccMyString) return Boolean;

FUNCTION "=" (val1, val2: in asn1SccMyString) return Boolean renames asn1SccMyString_Equal;

ERR_asn1SccMyString:CONSTANT INTEGER := 1006; -- (SIZE(0 .. 255))


 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;