#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint T_Int32;

#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define T_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void T_Int32_Initialize(T_Int32* pVal);
flag T_Int32_IsConstraintValid(const T_Int32* val, int* pErrCode);
flag T_Int32_Equal(const T_Int32* val1, const T_Int32* val2);

#ifndef ERR_T_Int32 
#define ERR_T_Int32		1001  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint T_UInt32;

#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define T_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void T_UInt32_Initialize(T_UInt32* pVal);
flag T_UInt32_IsConstraintValid(const T_UInt32* val, int* pErrCode);
flag T_UInt32_Equal(const T_UInt32* val1, const T_UInt32* val2);

#ifndef ERR_T_UInt32 
#define ERR_T_UInt32		1002  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint T_Int8;

#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define T_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void T_Int8_Initialize(T_Int8* pVal);
flag T_Int8_IsConstraintValid(const T_Int8* val, int* pErrCode);
flag T_Int8_Equal(const T_Int8* val1, const T_Int8* val2);

#ifndef ERR_T_Int8 
#define ERR_T_Int8		1003  /*(-128 .. 127)*/
#endif

typedef asn1SccUint T_UInt8;

#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define T_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void T_UInt8_Initialize(T_UInt8* pVal);
flag T_UInt8_IsConstraintValid(const T_UInt8* val, int* pErrCode);
flag T_UInt8_Equal(const T_UInt8* val1, const T_UInt8* val2);

#ifndef ERR_T_UInt8 
#define ERR_T_UInt8		1004  /*(0 .. 255)*/
#endif

typedef flag T_Boolean;

#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define T_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void T_Boolean_Initialize(T_Boolean* pVal);
flag T_Boolean_IsConstraintValid(const T_Boolean* val, int* pErrCode);
flag T_Boolean_Equal(const T_Boolean* val1, const T_Boolean* val2);



 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag T_Int32_Encode(const T_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_Int32_ACN_Encode(const T_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_UInt32_Encode(const T_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_UInt32_ACN_Encode(const T_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_Int8_Encode(const T_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_Int8_ACN_Encode(const T_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_UInt8_Encode(const T_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_UInt8_ACN_Encode(const T_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_Boolean_Encode(const T_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_Boolean_ACN_Encode(const T_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
